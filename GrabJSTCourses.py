import os


def clear_dir(work_dir, mkdir):
    # Empty the working directory
    # Currently done by deleting then (if desired) making it again
    os.system('rm -rf ' + work_dir)
    if mkdir:
        os.system('mkdir ' + work_dir)


def copy_file(trans_dir, work_dir, file):
    # Copy the jst file into the working directory
    os.system('cp ' + trans_dir + file + ' ' + work_dir)


def convert_to_image(img_dir, file, img_name):
    # Convert the jst file (presumably PDF) into an image (jpg) using imagemagick
    # Command for imagemagick version 6 is "convert-im6 inputfile -density (value) outputfile"
    # Higher density for higher quality, up to a certain point. Will take longer to run at higher values of course
    os.system('mkdir ' + img_dir)
    os.system('(cd ' + img_dir + '; convert-im6 -density 300 ../' + file + ' ' + img_name + '.jpg' + ')')


def read_image(img_dir, img_name, text_dir):
    # Loop through each image, reading it using tesseract then putting the results into a text file
    # Command for tesseract is "tesseract imagename outputfile"
    num_images = int(os.popen('ls ' + img_dir + ' -1 | wc -l').read())
    # print("num_images: ", num_images)
    os.system('mkdir ' + text_dir)

    for i in range(0, num_images):
        read_command = '(cd ' + text_dir + '; tesseract ../' + img_name + '-' + str(i) + '.jpg ' + img_name + '-' + str(i) + ')'
        print(read_command)
        os.system(read_command)


def scan_text(text_dir, image):
    # Scan through the text files generated by tesseract, looking for JST courses
    # Put those JST courses into a list to be sent elsewhere
    num_files = int(os.popen('ls ' + text_dir + ' -1 | wc -l').read())
    course_list = []
    saved_course = None

    for i in range(0, num_files):
        filename = text_dir + image + '-' + str(i) + '.txt'
        for line in open(filename):
            # Workaround for not cluttering with courses we don't need that are listed at the bottom
            if "Other Learning Experiences" in line:
                if saved_course is not None and saved_course not in course_list:
                    course_list.append(saved_course)
                return course_list
            if "Credit Is Not Recommended" in line:
                saved_course = None
            if 'MC-' in line or 'NV-' in line or 'AR-' in line:
                for word in line.split():
                    if word.startswith('MC-') or word.startswith('NV-') or word.startswith('AR-'):
                        if saved_course is not None and saved_course not in course_list:
                            course_list.append(saved_course)
                        saved_course = word

    return course_list


def grab_jst_courses(trans_dir, jst, image):
    working_dir = trans_dir + 'working/'
    image_dir = working_dir + 'images/'
    text_dir = image_dir + 'text/'

    clear_dir(working_dir, True)
    copy_file(trans_dir, working_dir, jst)
    convert_to_image(image_dir, jst, image)
    read_image(image_dir, image, text_dir)
    course_list = scan_text(text_dir, image)
    print(course_list)
    # clear_dir(working_dir, False)


# Required variables are transcript directory, jst filename, and desired image name
# All others are generated by the functions above
transcript_dir = 'files/Transcripts/'
jst_files = ['C.Mott_JST_1.7.19.pdf', '1842_001.pdf']
image_name = 'image'

grab_jst_courses(transcript_dir, jst_files[0], image_name)
